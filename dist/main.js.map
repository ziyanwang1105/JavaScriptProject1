{"version":3,"file":"main.js","mappings":"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","sources":["webpack://javascriptproject1/./src/scripts/game/game.js","webpack://javascriptproject1/./src/scripts/game/tile.js","webpack://javascriptproject1/webpack/bootstrap","webpack://javascriptproject1/./src/scripts/view.js","webpack://javascriptproject1/./src/index.js"],"sourcesContent":["const Tile = require(\"./tile\");\n\nclass Game{\n    constructor(tiles){\n        //the hand consist maximum 14 tiles\n        //meld consists dictionary where the value is array of arrays where each individual array is the pong,\n        // kong, chow display on the table\n        //scoreName is a list contains all the possible scoring from winning hand\n        //MeldType is the dictionary to indicate what type of\n        //hu is the final card added to the hand that player win the game\n        //tileCount keep track of tile used in the hand in dictionary\n        //initialize tileCount with the tiles passed in the constructor\n        this.tiles = tiles;\n        this.hands = [];\n        this.maxHand = 14;\n        this.melds = {'chow':[], 'pong': [], 'kong': [], 'closed_kong': []};\n        this.hu\n        this.meldTypes = {'chow': false, 'pong': false, 'kong': false, 'closed_kong': false};\n        this.tileCount = {};\n        this.tiles.forEach((tile)=>{\n            this.tileCount[tile.toString()] = 0\n        })\n        this.suitCount = {}\n        this.tiles.forEach((tile)=>{\n            this.suitCount[tile.suit] = 0\n        })\n    }\n\n    addTile(tile){\n        //inspect the meldType, if all false add the tile to hand, else add to meld accordingly\n        let method = this.checkMeld()\n        let result = []\n        if(method === 'hand'){\n            this.hands.push(tile);\n            result.push(tile)\n            this.maxHand -=1;\n            let keyName = tile.toString();\n            this.tileCount[keyName] +=1;\n            this.suitCount[tile.suit] +=1;\n            this.handSort()\n            if(this.maxHand === 0) {this.hu = tile};\n        }else{\n            result = tile.meld(method);\n            this.melds[method].push(result);\n            this.maxHand -= 3\n            result.forEach((ele)=>{\n                let eleName = ele.toString()\n                this.tileCount[eleName] +=1;\n                this.suitCount[ele.suit] +=1;\n            })\n        }\n        return result\n    }\n\n    meldSwitch(method){\n        //call the function when the button is clicked in frontend\n        for(let key in this.meldTypes){\n            let value = this.meldTypes[key];\n            if(key === method){\n                this.meldTypes[key] = !value;\n            }else{\n                this.meldTypes[key] = false;\n            }\n        }\n    }\n\n    checkMeld(){\n        let method;\n        if(Object.values(this.meldTypes).every(el=> !el)){\n            method = 'hand';\n        }else{\n            for(let key in this.meldTypes){\n                let value = this.meldTypes[key];\n                if(value) method = key;\n            }\n        }\n        return method;\n    }\n\n    validAdds(){\n        //return the list of tile that can be added to based on the meld type\n        let method = this.checkMeld();\n        let result = []\n        if(method === 'hand'){\n            if(this.maxHand === 0) return result;\n            this.tiles.forEach((tile)=>{\n                if(this.tileCount[tile.toString()] + 1 <=4){\n                    result.push(tile.toString());\n                }\n            })\n        }else{\n            if(this.maxHand < 3) return result;\n            this.tiles.forEach((ele)=>{\n                let meld = ele.meld(method);\n                let subCount = {}\n                meld.forEach((ele)=>{\n                    let keyName = ele.toString();\n                    if(subCount[keyName]){\n                        subCount[keyName] +=1;\n                    }else{\n                        subCount[keyName] = 1;\n                    }\n                })\n                for(let key in subCount){\n                    let value = subCount[key];\n                    if(this.tileCount[key] + value <=4){\n                        subCount[key] = true;\n                    }else{\n                        subCount[key] = false;\n                    }\n                }\n                if(Object.values(subCount).every(el=>el)){\n                    result.push(ele.toString())\n                }\n            })\n        }\n        return result\n    }\n\n    tileCompare(tile1, tile2){\n        let idx1;\n        let idx2;\n        this.tiles.forEach((tile, index)=>{\n            if(tile1.toString() === tile.toString()) idx1 = index;\n            if(tile2.toString() === tile.toString()) idx2 = index;\n        })\n        return idx1 > idx2 ? 1 : -1\n    }\n\n    handSort(){\n        this.hands.sort((a,b)=>this.tileCompare(a,b))\n    }\n\n    handToString(){\n        return this.hands.map((el)=>el.toString()).join(' ')\n    }\n\n    //Score detection\n    //Special hand detection\n    sevenPairs(){\n        //check if all tiles are in hand and they all comes in pair\n        return Object.values(this.tileCount).every(el=>el === 2 || el === 0) && Object.values(this.melds).every(el => el.length === 0)\n\n    }\n\n    pureSuit(){\n        //check if the hand + meld is pure suit or not. If it is return the pure suit symbol, else return false\n\n        for(let ele in this.suitCount){\n            let value = this.suitCount[ele]\n            if(value === 14) return ele\n        }\n        return false\n    }\n\n    nineGate(){\n        //check if the hand is a nine gate\n        //speical hand in pure suit\n        let sampleCount = {}\n        let eye;\n        for(let i = 1; i < 10; i++){\n            if(i === 1 || i ===9){\n                sampleCount[i] = 3\n            }else{\n                sampleCount[i] = 1\n            }\n        }\n        let suit = this.pureSuit()\n        if(suit){\n            this.hands.forEach((el)=>{\n                let key = el.number\n                if(sampleCount[key]){\n                    sampleCount[key] -=1\n                }else{\n                    eye = el\n                }\n            })\n        }\n        return Object.values(sampleCount).every(el=> el === 0) && suit === eye.suit\n    }\n\n    thirteenOrphans(){\n        let suits=[];\n        let honorSuits=[];\n        let eye;\n        Object.keys(this.suitCount).forEach((el)=>{\n            if(el.length > 1){\n                honorSuits.push(el)\n            }else{\n                suits.push(el)\n            }\n        })\n        let sampleCount = {}\n        suits.forEach((suit)=>{\n            sampleCount[`${suit}1`] = 1\n            sampleCount[`${suit}9`] = 1\n        })\n        honorSuits.forEach((ele)=>{\n            sampleCount[`${ele}0`] = 1\n        })\n        this.hands.forEach((el)=>{\n            let key = el.toString()\n            if(sampleCount[key]){\n                sampleCount[key] -=1\n            }else{\n                eye = el\n            }\n        })\n\n        return Object.values(sampleCount).every(el=> el === 0) && [0,1,9].includes(eye.number)\n\n    }\n\n    //check the triplet\n    checkTriplet(array){\n        //check if array is pong\n        if (array.every(ele=> ele.equal(array[0]))) return 'pong';\n        //check if array is chow, needs to be sorted\n        let one = array[0]\n        if(one.connectOne(array[1]) && one.connectTwo(array[2])) return 'chow'\n        return false\n    }\n\n    //generate array Index\n    arrayIndex(array){\n        let arrayIndx = {};\n        array.forEach((el, idx)=>{\n            if(arrayIndx[el.toString()]){\n                arrayIndx[el.toString()].push(idx);\n            }else{\n                arrayIndx[el.toString()] = [idx];\n            }\n        })\n        return arrayIndx\n    }\n    //check the remaining hand without eye for triplet sequence\n    checkRemaining(array){\n\n\n\n        //try find triplet sequence unitl there is no index count < 3\n        let copy = [...array]\n        let deconstruct = []\n        let count = array.length / 3\n        let arrayIndx = this.arrayIndex(copy)\n        while(!Object.values(arrayIndx).every(el1=> el1.length=== 3) && count !== 0){\n            let possibleTile = Object.values(arrayIndx).reduceRight((a,b)=>(a.length < b.length) ? a : b)\n            let possibleSeq = [possibleTile[0]]\n            let selectTile = array[possibleSeq[0]]\n            let indexFlatten = Object.values(arrayIndx).flat()\n            possibleSeq.push(indexFlatten.find((el)=>selectTile.connectOne(array[el])))\n            possibleSeq.push(indexFlatten.find((el)=>selectTile.connectTwo(array[el])))\n            if(possibleSeq.every(el=> typeof el !== 'undefined')){\n                deconstruct.push(possibleSeq)\n                count -=1\n                possibleSeq.forEach((el)=>{\n                    //update arrayIndx\n                    arrayIndx[copy[el].toString()].shift();\n                })\n                if(count === 0) return deconstruct\n            }else{\n                arrayIndx[copy[possibleSeq[0]].toString()].shift();\n            }\n            Object.keys(arrayIndx).forEach((el)=>{\n                if(arrayIndx[el].length === 0) delete arrayIndx[el]\n            })\n        }\n\n        return deconstruct\n    }\n\n    trueEye(){\n        let handIndex = this.arrayIndex(this.hands)\n        let possibleEyes = {}\n        for(let key in handIndex){\n            let value = handIndex[key]\n            if(value.length > 1){\n                possibleEyes[key] = value[0]\n            }\n        }\n    }\n\n    //check if the hand can hu\n    validHu(){\n        ///first find all possible eye pair in hand, iterate through the eye\n        //to check if the rest of the hand can be constructed to all triplet of pong or sequence\n        //when all tiles are formed accordingly, return the deconstruct hand for further score evaluation\n        let handDeconstruct = [];\n        let handIndex = this.arrayIndex(this.hands)\n        let possibleEyes = {}\n        for(let key in handIndex){\n            let value = handIndex[key]\n            if(value.length >1){\n                possibleEyes[key] = value[0]\n            }\n        }\n        for(let key in possibleEyes){\n            //generate the remaining hand without the eye\n            //check if remaining can form triplet of seq of pong\n            let el = possibleEyes[key];\n            let remaining = [...this.hands];\n            handDeconstruct.push(remaining.splice(el, 2));\n            let seq = this.checkRemaining(remaining)\n            //append deconstruct hand\n            seq.forEach((el)=>{\n                handDeconstruct.push(el.map(el=>remaining[el]))\n            })\n            //delete all seq from remaining\n            seq.flat().sort().forEach((el,idx)=>{\n                let decrease = el-idx;\n                remaining.splice(decrease, 1);\n            })\n\n            let pongIndex = [];\n\n            for(let i = 0; i < remaining.length / 3 ; i++){\n                let lens = remaining.slice(i * 3, (i+1) * 3)\n                if (this.checkTriplet(lens) === 'pong') {\n                    handDeconstruct.push([...lens])\n                    pongIndex.push(i * 3);\n                }\n            }\n            //remove all pong in hand\n            for(let j = 0; j < pongIndex.length; j++){\n                let idx = pongIndex[j];\n                remaining.splice(idx, 3)\n                pongIndex = pongIndex.map((el)=> {\n                    if(el > idx){\n                        return el - 3\n                    } else{\n                        return el\n                    };\n                })\n            }\n\n\n            //if all tiles are used break the iteration\n            if(remaining.length === 0){\n                return handDeconstruct;\n            }else{\n                handDeconstruct = []\n            }\n        }\n\n\n        return handDeconstruct\n    }\n    //Generic hand detection\n    //check special hand before everything\n    //Find the eye pair on hand and divde the rest of the tile as set of 3, if all sets are sequence or pong, the hand is a valid win hand\n    //based on the type of sets on hand and melds there are more score calculated\n\n    checkScore(){\n\n        //reset score\n        let scoreName = [];\n        //check if hand is incomplete\n        if(!this.hu || this.maxHand !== 0) return ['The hand is incomplete'];\n        //check if hand is a special hand\n        let specialHands = [this.sevenPairs, this.thirteenOrphans, this.nineGate];\n        specialHands.forEach((fun)=>{\n            if (fun.call(this)){\n                scoreName.push(fun.name);\n            }\n        })\n        if(scoreName.length > 0 && !scoreName.includes(this.sevenPairs.name)) return scoreName;\n\n        //check suits score: pureSuit, mixSuit, and allHonorSuit, greatWind, littleDragon, littleWind, greatDragon, pureGreen\n        let suitScore = [this.pureSuit]\n        suitScore.forEach((fun)=>{\n            if (fun.call(this)){\n                scoreName.push(fun.name);\n            }\n        })\n\n        if(scoreName.includes(this.sevenPairs.name)) return scoreName;\n        //check if hand can be hu\n        let deconstruct = this.validHu();\n        //find all score name from hand\n        if(deconstruct.length > 0) {\n            scoreName.push('hu')\n            return scoreName\n        }else{\n            return ['Invalid winning hand']\n        }\n    }\n}\n\n\nmodule.exports = Game;\n","class Tile{\n    constructor(suit, number){\n        // suit has bamboo as b, dots as d, characters as c\n        // suit tile has number 1 - 9\n        // honor tiles has suit east, south, west ,north, red, green, and white\n        //honor tiles doesn't have number so assign as 0\n        this.suit = suit;\n        this.number = number;\n    }\n    toString(){\n        return `${this.suit}${this.number}`\n    }\n\n    equal(tile){\n        //return true if the tile has same number and suit\n        return this.toString() === tile.toString()\n    }\n    connect(tile){\n        //return true if the tile can connect as a triplet sequence\n        const numDiff = Math.abs(this.number - tile.number)\n        return this.suit === tile.suit && numDiff <= 2 && numDiff > 0\n    }\n    connectOne(tile){\n        const numDiff = Math.abs(this.number - tile.number)\n        return this.suit === tile.suit && numDiff === 1\n    }\n\n    connectTwo(tile){\n        const numDiff = Math.abs(this.number - tile.number)\n        return this.suit === tile.suit && numDiff === 2\n    }\n    meld(method){\n        //return the meld array of tile based on the method\n        let result = []\n        switch (method){\n            case 'chow':\n                if(this.number < 7){\n                    let tile2 = new Tile(this.suit, this.number + 1);\n                    let tile3 = new Tile(this.suit, this.number + 2);\n                    result.push(this, tile2, tile3);\n                }else{\n                    for(let i = 7; i < 10; i++) {\n                        let newTile = new Tile(this.suit, i);\n                        result.push(newTile);\n                    }\n                }\n                break;\n            case 'pong':\n                for(let i = 0; i < 3; i++){\n                    let newTile2 = new Tile(this.suit, this.number);\n                    result.push(newTile2);\n                }\n                break;\n            case 'kong':\n                for(let i = 0; i < 4; i++){\n                    let newTile2 = new Tile(this.suit, this.number);\n                    result.push(newTile2);\n                }\n                break;\n            case 'closed kong':\n                for(let i = 0; i < 4; i++){\n                    let newTile2 = new Tile(this.suit, this.number);\n                    result.push(newTile2);\n                }\n                break;\n        }\n        return result\n    }\n}\n\nmodule.exports = Tile;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","class View {\n    constructor(game, tile){\n        this.game = game //game object that store and evaluate hand and meld\n        this.tile = tile //local storage of all tiles\n        this.clickTile = this.clickTile.bind(this)\n        this.setupTileSelector()\n        this.setupClickers()\n        this.setupMeldClickers()\n        this.setupCalculateClickers()\n    }\n    //generate all tile\n    //add event listener for clicing the tile and it will either add to hand or meld\n    //need a tracker to track the number of tile used and cannot exceed more than 4 tiles with\n    //the same suit and number used in the hand + meld\n    //disable the tile click if adding it in will violate the above rule\n\n    setupTileSelector(){\n        let tileSelector = document.querySelector('#tile_selector')\n        let ul = document.createElement(\"ul\");\n        ul.setAttribute(\"class\", \"tiles\");\n        this.tile.map((el, index)=>{\n            let li = document.createElement(\"li\");\n            li.setAttribute(\"class\", `${el.toString()}`);\n            let img = document.createElement(\"img\");\n            img.setAttribute(\"src\",`/assets/img/64/fulltiles/${index}.png`);\n            img.setAttribute(\"tile_index\", index);\n            li.appendChild(img);\n            ul.appendChild(li);\n        })\n        tileSelector.append(ul)\n    }\n\n    setupClickers(){\n        let clickable = this.game.validAdds();\n        let tiles = document.querySelectorAll('.tiles > li')\n        tiles.forEach((ele)=>{\n            ele.removeEventListener('click', this.clickTile)\n            if(clickable.includes(ele.className)){\n                ele.addEventListener('click', this.clickTile);\n            }\n        })\n    }\n\n    setupMeldClickers(){\n        let melds = document.querySelectorAll('#meld_type > button')\n        melds.forEach((buttons)=>{\n            buttons.addEventListener('click', this.clickMeld.bind(this))\n        })\n    }\n\n    setupCalculateClickers(){\n        let calcButton = document.querySelector('#calculate_score')\n        calcButton.addEventListener('click', this.clickCalculate.bind(this))\n    }\n\n    //clicking the tile will append tile in hand / meld and store the tile class object in an array\n    //e is the event for clicking tile\n    //check the game class meld type to see where to add the tile\n    //check the game class tile count and disable the tiles click if it cannot be added\n    clickTile(e){\n        e.preventDefault()\n        let clickIndex = e.target.getAttribute(\"tile_index\");\n        let selectTile = this.game.tiles[clickIndex];\n        let method = this.game.checkMeld()\n        let addObject = this.game.addTile(selectTile);\n        //convert object to html and add it in according to the method\n        if(method === 'hand'){\n            let hands = document.querySelector('.hands');\n            addObject.forEach((ele)=>{\n                let li = document.createElement(\"li\");\n                li.setAttribute(\"class\", `${ele.toString()}`);\n                let index = this.tile.indexOf(ele)\n                let img = document.createElement(\"img\");\n                img.setAttribute(\"src\",`/assets/img/64/fulltiles/${index}.png`);\n                li.setAttribute(\"tile_index\", index);\n                li.appendChild(img);\n                hands.append(li);\n            });\n            [...hands.children]\n                .sort((a,b)=> Number(a.getAttribute('tile_index')) > Number(b.getAttribute('tile_index')) ? 1 : -1)\n                .forEach((node)=>{hands.appendChild(node)})\n        }else{\n            let melds = document.querySelector('.melds');\n            let li2 = document.createElement(\"li\")\n            let ul = document.createElement(\"ul\");\n            ul.setAttribute(\"meldType\", `${method}`);\n            addObject.forEach((ele)=>{\n                let li = document.createElement(\"li\");\n                li.setAttribute(\"class\", `${ele.toString()}`);\n                let index;\n                this.tile.forEach((ele2, i)=>{\n                    if(ele2.equal(ele)) index = i;\n                })\n                let img = document.createElement(\"img\");\n                img.setAttribute(\"src\",`/assets/img/64/fulltiles/${index}.png`);\n                li.setAttribute(\"tile_index\", index);\n                li.appendChild(img);\n                ul.appendChild(li);\n                li2.appendChild(ul)\n                melds.append(li2);\n            })\n        }\n        this.setupClickers()\n        //reorder the hand and meld\n\n    }\n\n    //clicking the meld type button will change the click tile action\n    //only the chosen one type value become true  and change all other value to false\n    //Meld type button can either be selected one or none\n\n\n    clickMeld(e){\n        e.preventDefault()\n        let method = e.target.getAttribute(\"id\")\n        this.game.meldSwitch(method)\n        this.setupClickers()\n\n    }\n\n    clickCalculate(e){\n        e.preventDefault()\n        let result = this.game.checkScore()\n        let scoreBoard = document.querySelector('.scores')\n        scoreBoard.innerHTML = ''\n        result.forEach((el)=>{\n            let li = document.createElement(\"li\")\n            li.innerText = el\n            li.setAttribute('score_name', el)\n            scoreBoard.appendChild(li)\n        })\n\n    }\n\n\n}\n\nexport default View\n","const Game = require(\"./scripts/game/game.js\")\nconst Tile = require(\"./scripts/game/tile.js\")\nimport View from \"./scripts/view.js\"\n\nconst tiles= [];\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  let suits = ['c', 'b', 'd']\n  let honorSuits = ['east', 'south', 'west' ,'north', 'red', 'green', 'white']\n  for(let suit in suits){\n    for(let i = 1; i < 10; i++){\n        let newTile = new Tile(suits[suit], i);\n        tiles.push(newTile);\n    }\n  }\n  for(let honorSuit in honorSuits){\n    let honorTile = new Tile(honorSuits[honorSuit], 0);\n    tiles.push(honorTile);\n  }\n  const v = new View(new Game(tiles), tiles);\n  });\n"],"names":["require","module","exports","constructor","tiles","this","hands","maxHand","melds","hu","meldTypes","tileCount","forEach","tile","toString","suitCount","suit","addTile","method","checkMeld","result","push","keyName","handSort","meld","ele","eleName","meldSwitch","key","value","Object","values","every","el","validAdds","subCount","tileCompare","tile1","tile2","idx1","idx2","index","sort","a","b","handToString","map","join","sevenPairs","length","pureSuit","nineGate","eye","sampleCount","i","number","thirteenOrphans","suits","honorSuits","keys","includes","checkTriplet","array","equal","one","connectOne","connectTwo","arrayIndex","arrayIndx","idx","checkRemaining","copy","deconstruct","count","el1","possibleSeq","reduceRight","selectTile","indexFlatten","flat","find","shift","trueEye","handIndex","possibleEyes","validHu","handDeconstruct","remaining","splice","seq","decrease","pongIndex","lens","slice","j","checkScore","scoreName","fun","call","name","Tile","connect","numDiff","Math","abs","tile3","newTile","newTile2","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","game","clickTile","bind","setupTileSelector","setupClickers","setupMeldClickers","setupCalculateClickers","tileSelector","document","querySelector","ul","createElement","setAttribute","li","img","appendChild","append","clickable","querySelectorAll","removeEventListener","className","addEventListener","buttons","clickMeld","clickCalculate","e","preventDefault","clickIndex","target","getAttribute","addObject","indexOf","children","Number","node","li2","ele2","scoreBoard","innerHTML","innerText","Game","honorSuit","honorTile","View"],"sourceRoot":""}