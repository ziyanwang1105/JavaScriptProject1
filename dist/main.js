/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scripts_view_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scripts/view.js */ \"./src/scripts/view.js\");\nconst Game = __webpack_require__(/*! ./scripts/game/game.js */ \"./src/scripts/game/game.js\");\nconst Tile = __webpack_require__(/*! ./scripts/game/tile.js */ \"./src/scripts/game/tile.js\");\n\nconst tiles = [];\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  let suits = ['c', 'b', 'd'];\n  let honorSuits = ['east', 'south', 'west', 'north', 'red', 'green', 'white'];\n  for (let suit in suits) {\n    for (let i = 1; i < 10; i++) {\n      let newTile = new Tile(suits[suit], i);\n      tiles.push(newTile);\n    }\n  }\n  for (let honorSuit in honorSuits) {\n    let honorTile = new Tile(honorSuits[honorSuit], 0);\n    tiles.push(honorTile);\n  }\n  const v = new _scripts_view_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](new Game(tiles), tiles);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxJQUFJLEdBQUdDLG1CQUFPLENBQUMsMERBQXdCLENBQUM7QUFDOUMsTUFBTUMsSUFBSSxHQUFHRCxtQkFBTyxDQUFDLDBEQUF3QixDQUFDO0FBQ1Y7QUFFcEMsTUFBTUcsS0FBSyxHQUFFLEVBQUU7QUFFZkMsUUFBUSxDQUFDQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsRUFBRSxNQUFNO0VBQ2xELElBQUlDLEtBQUssR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO0VBQzNCLElBQUlDLFVBQVUsR0FBRyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQztFQUM1RSxLQUFJLElBQUlDLElBQUksSUFBSUYsS0FBSyxFQUFDO0lBQ3BCLEtBQUksSUFBSUcsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLEVBQUUsRUFBRUEsQ0FBQyxFQUFFLEVBQUM7TUFDdkIsSUFBSUMsT0FBTyxHQUFHLElBQUlULElBQUksQ0FBQ0ssS0FBSyxDQUFDRSxJQUFJLENBQUMsRUFBRUMsQ0FBQyxDQUFDO01BQ3RDTixLQUFLLENBQUNRLElBQUksQ0FBQ0QsT0FBTyxDQUFDO0lBQ3ZCO0VBQ0Y7RUFDQSxLQUFJLElBQUlFLFNBQVMsSUFBSUwsVUFBVSxFQUFDO0lBQzlCLElBQUlNLFNBQVMsR0FBRyxJQUFJWixJQUFJLENBQUNNLFVBQVUsQ0FBQ0ssU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xEVCxLQUFLLENBQUNRLElBQUksQ0FBQ0UsU0FBUyxDQUFDO0VBQ3ZCO0VBQ0EsTUFBTUMsQ0FBQyxHQUFHLElBQUlaLHdEQUFJLENBQUMsSUFBSUgsSUFBSSxDQUFDSSxLQUFLLENBQUMsRUFBRUEsS0FBSyxDQUFDO0FBQzFDLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2phdmFzY3JpcHRwcm9qZWN0MS8uL3NyYy9pbmRleC5qcz9iNjM1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEdhbWUgPSByZXF1aXJlKFwiLi9zY3JpcHRzL2dhbWUvZ2FtZS5qc1wiKVxuY29uc3QgVGlsZSA9IHJlcXVpcmUoXCIuL3NjcmlwdHMvZ2FtZS90aWxlLmpzXCIpXG5pbXBvcnQgVmlldyBmcm9tIFwiLi9zY3JpcHRzL3ZpZXcuanNcIlxuXG5jb25zdCB0aWxlcz0gW107XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IHtcbiAgbGV0IHN1aXRzID0gWydjJywgJ2InLCAnZCddXG4gIGxldCBob25vclN1aXRzID0gWydlYXN0JywgJ3NvdXRoJywgJ3dlc3QnICwnbm9ydGgnLCAncmVkJywgJ2dyZWVuJywgJ3doaXRlJ11cbiAgZm9yKGxldCBzdWl0IGluIHN1aXRzKXtcbiAgICBmb3IobGV0IGkgPSAxOyBpIDwgMTA7IGkrKyl7XG4gICAgICAgIGxldCBuZXdUaWxlID0gbmV3IFRpbGUoc3VpdHNbc3VpdF0sIGkpO1xuICAgICAgICB0aWxlcy5wdXNoKG5ld1RpbGUpO1xuICAgIH1cbiAgfVxuICBmb3IobGV0IGhvbm9yU3VpdCBpbiBob25vclN1aXRzKXtcbiAgICBsZXQgaG9ub3JUaWxlID0gbmV3IFRpbGUoaG9ub3JTdWl0c1tob25vclN1aXRdLCAwKTtcbiAgICB0aWxlcy5wdXNoKGhvbm9yVGlsZSk7XG4gIH1cbiAgY29uc3QgdiA9IG5ldyBWaWV3KG5ldyBHYW1lKHRpbGVzKSwgdGlsZXMpO1xuICB9KTtcbiJdLCJuYW1lcyI6WyJHYW1lIiwicmVxdWlyZSIsIlRpbGUiLCJWaWV3IiwidGlsZXMiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJzdWl0cyIsImhvbm9yU3VpdHMiLCJzdWl0IiwiaSIsIm5ld1RpbGUiLCJwdXNoIiwiaG9ub3JTdWl0IiwiaG9ub3JUaWxlIiwidiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/game/game.js":
/*!**********************************!*\
  !*** ./src/scripts/game/game.js ***!
  \**********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const Tile = __webpack_require__(/*! ./tile */ \"./src/scripts/game/tile.js\");\nclass Game {\n  constructor(tiles) {\n    //the hand consist maximum 14 tiles\n    //meld consists dictionary where the value is array of arrays where each individual array is the pong,\n    // kong, chow display on the table\n    //scoreName is a list contains all the possible scoring from winning hand\n    //MeldType is the dictionary to indicate what type of\n    //hu is the final card added to the hand that player win the game\n    //tileCount keep track of tile used in the hand in dictionary\n    //initialize tileCount with the tiles passed in the constructor\n    this.tiles = tiles;\n    this.hands = [];\n    this.maxHand = 14;\n    this.melds = {\n      'chow': [],\n      'pong': [],\n      'kong': [],\n      'closed_kong': []\n    };\n    this.hu;\n    this.meldTypes = {\n      'chow': false,\n      'pong': false,\n      'kong': false,\n      'closed_kong': false\n    };\n    this.tileCount = {};\n    this.tiles.forEach(tile => {\n      this.tileCount[tile.toString()] = 0;\n    });\n    this.suitCount = {};\n    this.tiles.forEach(tile => {\n      this.suitCount[tile.suit] = 0;\n    });\n  }\n  addTile(tile) {\n    //inspect the meldType, if all false add the tile to hand, else add to meld accordingly\n    let method = this.checkMeld();\n    let result = [];\n    if (method === 'hand') {\n      this.hands.push(tile);\n      result.push(tile);\n      this.maxHand -= 1;\n      let keyName = tile.toString();\n      this.tileCount[keyName] += 1;\n      this.suitCount[tile.suit] += 1;\n      this.handSort();\n      if (this.maxHand === 0) {\n        this.hu = tile;\n      }\n      ;\n    } else {\n      result = tile.meld(method);\n      this.melds[method].push(result);\n      this.maxHand -= 3;\n      result.forEach(ele => {\n        let eleName = ele.toString();\n        this.tileCount[eleName] += 1;\n        this.suitCount[ele.suit] += 1;\n      });\n    }\n    return result;\n  }\n  meldSwitch(method) {\n    //call the function when the button is clicked in frontend\n    for (let key in this.meldTypes) {\n      let value = this.meldTypes[key];\n      if (key === method) {\n        this.meldTypes[key] = !value;\n      } else {\n        this.meldTypes[key] = false;\n      }\n    }\n  }\n  checkMeld() {\n    let method;\n    if (Object.values(this.meldTypes).every(el => !el)) {\n      method = 'hand';\n    } else {\n      for (let key in this.meldTypes) {\n        let value = this.meldTypes[key];\n        if (value) method = key;\n      }\n    }\n    return method;\n  }\n  validAdds() {\n    //return the list of tile that can be added to based on the meld type\n    let method = this.checkMeld();\n    let result = [];\n    if (method === 'hand') {\n      if (this.maxHand === 0) return result;\n      this.tiles.forEach(tile => {\n        if (this.tileCount[tile.toString()] + 1 <= 4) {\n          result.push(tile.toString());\n        }\n      });\n    } else {\n      if (this.maxHand < 3) return result;\n      this.tiles.forEach(ele => {\n        let meld = ele.meld(method);\n        let subCount = {};\n        meld.forEach(ele => {\n          let keyName = ele.toString();\n          if (subCount[keyName]) {\n            subCount[keyName] += 1;\n          } else {\n            subCount[keyName] = 1;\n          }\n        });\n        for (let key in subCount) {\n          let value = subCount[key];\n          if (this.tileCount[key] + value <= 4) {\n            subCount[key] = true;\n          } else {\n            subCount[key] = false;\n          }\n        }\n        if (Object.values(subCount).every(el => el)) {\n          result.push(ele.toString());\n        }\n      });\n    }\n    return result;\n  }\n  tileCompare(tile1, tile2) {\n    let idx1;\n    let idx2;\n    this.tiles.forEach((tile, index) => {\n      if (tile1.toString() === tile.toString()) idx1 = index;\n      if (tile2.toString() === tile.toString()) idx2 = index;\n    });\n    return idx1 > idx2 ? 1 : -1;\n  }\n  handSort() {\n    this.hands.sort((a, b) => this.tileCompare(a, b));\n  }\n  handToString() {\n    return this.hands.map(el => el.toString()).join(' ');\n  }\n\n  //Score detection\n  //Special hand detection\n  sevenPairs() {\n    //check if all tiles are in hand and they all comes in pair\n    return Object.values(this.tileCount).every(el => el === 2 || el === 0) && Object.values(this.melds).every(el => el.length === 0);\n  }\n  pureSuit() {\n    //check if the hand + meld is pure suit or not. If it is return the pure suit symbol, else return false\n\n    for (let ele in this.suitCount) {\n      let value = this.suitCount[ele];\n      if (value === 14) return ele;\n    }\n    return false;\n  }\n  nineGate() {\n    //check if the hand is a nine gate\n    //speical hand in pure suit\n    let sampleCount = {};\n    let eye;\n    for (let i = 1; i < 10; i++) {\n      if (i === 1 || i === 9) {\n        sampleCount[i] = 3;\n      } else {\n        sampleCount[i] = 1;\n      }\n    }\n    let suit = this.pureSuit();\n    if (suit) {\n      this.hands.forEach(el => {\n        let key = el.number;\n        if (sampleCount[key]) {\n          sampleCount[key] -= 1;\n        } else {\n          eye = el;\n        }\n      });\n    }\n    return Object.values(sampleCount).every(el => el === 0) && suit === eye.suit;\n  }\n  thirteenOrphans() {\n    let suits = [];\n    let honorSuits = [];\n    let eye;\n    Object.keys(this.suitCount).forEach(el => {\n      if (el.length > 1) {\n        honorSuits.push(el);\n      } else {\n        suits.push(el);\n      }\n    });\n    let sampleCount = {};\n    suits.forEach(suit => {\n      sampleCount[`${suit}1`] = 1;\n      sampleCount[`${suit}9`] = 1;\n    });\n    honorSuits.forEach(ele => {\n      sampleCount[`${ele}0`] = 1;\n    });\n    this.hands.forEach(el => {\n      let key = el.toString();\n      if (sampleCount[key]) {\n        sampleCount[key] -= 1;\n      } else {\n        eye = el;\n      }\n    });\n    return Object.values(sampleCount).every(el => el === 0) && [0, 1, 9].includes(eye.number);\n  }\n\n  //check the triplet\n  checkTriplet(array) {\n    //check if array is pong\n    if (array.every(ele => ele.equal(array[0]))) return 'pong';\n    //check if array is chow, needs to be sorted\n    let one = array[0];\n    if (one.connectOne(array[1]) && one.connectTwo(array[2])) return 'chow';\n    return false;\n  }\n\n  //generate array Index\n  arrayIndex(array) {\n    let arrayIndx = {};\n    array.forEach((el, idx) => {\n      if (arrayIndx[el.toString()]) {\n        arrayIndx[el.toString()].push(idx);\n      } else {\n        arrayIndx[el.toString()] = [idx];\n      }\n    });\n    return arrayIndx;\n  }\n  //check the remaining hand without eye for triplet sequence\n  checkRemaining(array) {\n    //try find triplet sequence unitl there is no index count < 3\n    let copy = [...array];\n    let deconstruct = [];\n    let count = array.length / 3;\n    let arrayIndx = this.arrayIndex(copy);\n    while (!Object.values(arrayIndx).every(el1 => el1.length === 3) && count !== 0) {\n      let possibleTile = Object.values(arrayIndx).reduceRight((a, b) => a.length < b.length ? a : b);\n      let possibleSeq = [possibleTile[0]];\n      let selectTile = array[possibleSeq[0]];\n      let indexFlatten = Object.values(arrayIndx).flat();\n      possibleSeq.push(indexFlatten.find(el => selectTile.connectOne(array[el])));\n      possibleSeq.push(indexFlatten.find(el => selectTile.connectTwo(array[el])));\n      if (possibleSeq.every(el => typeof el !== 'undefined')) {\n        deconstruct.push(possibleSeq);\n        count -= 1;\n        possibleSeq.forEach(el => {\n          //update arrayIndx\n          arrayIndx[copy[el].toString()].shift();\n        });\n        if (count === 0) return deconstruct;\n      } else {\n        arrayIndx[copy[possibleSeq[0]].toString()].shift();\n      }\n      Object.keys(arrayIndx).forEach(el => {\n        if (arrayIndx[el].length === 0) delete arrayIndx[el];\n      });\n    }\n    return deconstruct;\n  }\n  trueEye() {\n    let handIndex = this.arrayIndex(this.hands);\n    let possibleEyes = {};\n    for (let key in handIndex) {\n      let value = handIndex[key];\n      if (value.length > 1) {\n        possibleEyes[key] = value[0];\n      }\n    }\n  }\n\n  //check if the hand can hu\n  validHu() {\n    ///first find all possible eye pair in hand, iterate through the eye\n    //to check if the rest of the hand can be constructed to all triplet of pong or sequence\n    //when all tiles are formed accordingly, return the deconstruct hand for further score evaluation\n    let handDeconstruct = [];\n    let handIndex = this.arrayIndex(this.hands);\n    let possibleEyes = {};\n    for (let key in handIndex) {\n      let value = handIndex[key];\n      if (value.length > 1) {\n        possibleEyes[key] = value[0];\n      }\n    }\n    for (let key in possibleEyes) {\n      //generate the remaining hand without the eye\n      //check if remaining can form triplet of seq of pong\n      let el = possibleEyes[key];\n      let remaining = [...this.hands];\n      handDeconstruct.push(remaining.splice(el, 2));\n      let seq = this.checkRemaining(remaining);\n      //append deconstruct hand\n      seq.forEach(el => {\n        handDeconstruct.push(el.map(el => remaining[el]));\n      });\n      //delete all seq from remaining\n      seq.flat().sort().forEach((el, idx) => {\n        let decrease = el - idx;\n        remaining.splice(decrease, 1);\n      });\n      let pongIndex = [];\n      for (let i = 0; i < remaining.length / 3; i++) {\n        let lens = remaining.slice(i * 3, (i + 1) * 3);\n        if (this.checkTriplet(lens) === 'pong') {\n          handDeconstruct.push([...lens]);\n          pongIndex.push(i * 3);\n        }\n      }\n      //remove all pong in hand\n      for (let j = 0; j < pongIndex.length; j++) {\n        let idx = pongIndex[j];\n        remaining.splice(idx, 3);\n        pongIndex = pongIndex.map(el => {\n          if (el > idx) {\n            return el - 3;\n          } else {\n            return el;\n          }\n          ;\n        });\n      }\n\n      //if all tiles are used break the iteration\n      if (remaining.length === 0) {\n        return handDeconstruct;\n      } else {\n        handDeconstruct = [];\n      }\n    }\n    return handDeconstruct;\n  }\n  //Generic hand detection\n  //check special hand before everything\n  //Find the eye pair on hand and divde the rest of the tile as set of 3, if all sets are sequence or pong, the hand is a valid win hand\n  //based on the type of sets on hand and melds there are more score calculated\n\n  checkScore() {\n    //reset score\n    let scoreName = [];\n    //check if hand is incomplete\n    if (!this.hu || this.maxHand !== 0) return ['The hand is incomplete'];\n    //check if hand is a special hand\n    let specialHands = [this.sevenPairs, this.thirteenOrphans, this.nineGate];\n    specialHands.forEach(fun => {\n      if (fun.call(this)) {\n        scoreName.push(fun.name);\n      }\n    });\n    if (scoreName.length > 0 && !scoreName.includes(this.sevenPairs.name)) return scoreName;\n\n    //check suits score: pureSuit, mixSuit, and allHonorSuit, greatWind, littleDragon, littleWind, greatDragon, pureGreen\n    let suitScore = [this.pureSuit];\n    suitScore.forEach(fun => {\n      if (fun.call(this)) {\n        scoreName.push(fun.name);\n      }\n    });\n    if (scoreName.includes(this.sevenPairs.name)) return scoreName;\n    //check if hand can be hu\n    let deconstruct = this.validHu();\n    //find all score name from hand\n    if (deconstruct.length > 0) {\n      scoreName.push('hu');\n      return scoreName;\n    } else {\n      return ['Invalid winning hand'];\n    }\n  }\n}\nmodule.exports = Game;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/game/game.js\n");

/***/ }),

/***/ "./src/scripts/game/tile.js":
/*!**********************************!*\
  !*** ./src/scripts/game/tile.js ***!
  \**********************************/
/***/ (function(module) {

eval("class Tile {\n  constructor(suit, number) {\n    // suit has bamboo as b, dots as d, characters as c\n    // suit tile has number 1 - 9\n    // honor tiles has suit east, south, west ,north, red, green, and white\n    //honor tiles doesn't have number so assign as 0\n    this.suit = suit;\n    this.number = number;\n  }\n  toString() {\n    return `${this.suit}${this.number}`;\n  }\n  equal(tile) {\n    //return true if the tile has same number and suit\n    return this.toString() === tile.toString();\n  }\n  connect(tile) {\n    //return true if the tile can connect as a triplet sequence\n    const numDiff = Math.abs(this.number - tile.number);\n    return this.suit === tile.suit && numDiff <= 2 && numDiff > 0;\n  }\n  connectOne(tile) {\n    const numDiff = Math.abs(this.number - tile.number);\n    return this.suit === tile.suit && numDiff === 1;\n  }\n  connectTwo(tile) {\n    const numDiff = Math.abs(this.number - tile.number);\n    return this.suit === tile.suit && numDiff === 2;\n  }\n  meld(method) {\n    //return the meld array of tile based on the method\n    let result = [];\n    switch (method) {\n      case 'chow':\n        if (this.number < 7) {\n          let tile2 = new Tile(this.suit, this.number + 1);\n          let tile3 = new Tile(this.suit, this.number + 2);\n          result.push(this, tile2, tile3);\n        } else {\n          for (let i = 7; i < 10; i++) {\n            let newTile = new Tile(this.suit, i);\n            result.push(newTile);\n          }\n        }\n        break;\n      case 'pong':\n        for (let i = 0; i < 3; i++) {\n          let newTile2 = new Tile(this.suit, this.number);\n          result.push(newTile2);\n        }\n        break;\n      case 'kong':\n        for (let i = 0; i < 4; i++) {\n          let newTile2 = new Tile(this.suit, this.number);\n          result.push(newTile2);\n        }\n        break;\n      case 'closed kong':\n        for (let i = 0; i < 4; i++) {\n          let newTile2 = new Tile(this.suit, this.number);\n          result.push(newTile2);\n        }\n        break;\n    }\n    return result;\n  }\n}\nmodule.exports = Tile;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9nYW1lL3RpbGUuanMiLCJuYW1lcyI6WyJUaWxlIiwiY29uc3RydWN0b3IiLCJzdWl0IiwibnVtYmVyIiwidG9TdHJpbmciLCJlcXVhbCIsInRpbGUiLCJjb25uZWN0IiwibnVtRGlmZiIsIk1hdGgiLCJhYnMiLCJjb25uZWN0T25lIiwiY29ubmVjdFR3byIsIm1lbGQiLCJtZXRob2QiLCJyZXN1bHQiLCJ0aWxlMiIsInRpbGUzIiwicHVzaCIsImkiLCJuZXdUaWxlIiwibmV3VGlsZTIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qYXZhc2NyaXB0cHJvamVjdDEvLi9zcmMvc2NyaXB0cy9nYW1lL3RpbGUuanM/NGYzMyJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBUaWxle1xuICAgIGNvbnN0cnVjdG9yKHN1aXQsIG51bWJlcil7XG4gICAgICAgIC8vIHN1aXQgaGFzIGJhbWJvbyBhcyBiLCBkb3RzIGFzIGQsIGNoYXJhY3RlcnMgYXMgY1xuICAgICAgICAvLyBzdWl0IHRpbGUgaGFzIG51bWJlciAxIC0gOVxuICAgICAgICAvLyBob25vciB0aWxlcyBoYXMgc3VpdCBlYXN0LCBzb3V0aCwgd2VzdCAsbm9ydGgsIHJlZCwgZ3JlZW4sIGFuZCB3aGl0ZVxuICAgICAgICAvL2hvbm9yIHRpbGVzIGRvZXNuJ3QgaGF2ZSBudW1iZXIgc28gYXNzaWduIGFzIDBcbiAgICAgICAgdGhpcy5zdWl0ID0gc3VpdDtcbiAgICAgICAgdGhpcy5udW1iZXIgPSBudW1iZXI7XG4gICAgfVxuICAgIHRvU3RyaW5nKCl7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLnN1aXR9JHt0aGlzLm51bWJlcn1gXG4gICAgfVxuXG4gICAgZXF1YWwodGlsZSl7XG4gICAgICAgIC8vcmV0dXJuIHRydWUgaWYgdGhlIHRpbGUgaGFzIHNhbWUgbnVtYmVyIGFuZCBzdWl0XG4gICAgICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCkgPT09IHRpbGUudG9TdHJpbmcoKVxuICAgIH1cbiAgICBjb25uZWN0KHRpbGUpe1xuICAgICAgICAvL3JldHVybiB0cnVlIGlmIHRoZSB0aWxlIGNhbiBjb25uZWN0IGFzIGEgdHJpcGxldCBzZXF1ZW5jZVxuICAgICAgICBjb25zdCBudW1EaWZmID0gTWF0aC5hYnModGhpcy5udW1iZXIgLSB0aWxlLm51bWJlcilcbiAgICAgICAgcmV0dXJuIHRoaXMuc3VpdCA9PT0gdGlsZS5zdWl0ICYmIG51bURpZmYgPD0gMiAmJiBudW1EaWZmID4gMFxuICAgIH1cbiAgICBjb25uZWN0T25lKHRpbGUpe1xuICAgICAgICBjb25zdCBudW1EaWZmID0gTWF0aC5hYnModGhpcy5udW1iZXIgLSB0aWxlLm51bWJlcilcbiAgICAgICAgcmV0dXJuIHRoaXMuc3VpdCA9PT0gdGlsZS5zdWl0ICYmIG51bURpZmYgPT09IDFcbiAgICB9XG5cbiAgICBjb25uZWN0VHdvKHRpbGUpe1xuICAgICAgICBjb25zdCBudW1EaWZmID0gTWF0aC5hYnModGhpcy5udW1iZXIgLSB0aWxlLm51bWJlcilcbiAgICAgICAgcmV0dXJuIHRoaXMuc3VpdCA9PT0gdGlsZS5zdWl0ICYmIG51bURpZmYgPT09IDJcbiAgICB9XG4gICAgbWVsZChtZXRob2Qpe1xuICAgICAgICAvL3JldHVybiB0aGUgbWVsZCBhcnJheSBvZiB0aWxlIGJhc2VkIG9uIHRoZSBtZXRob2RcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdXG4gICAgICAgIHN3aXRjaCAobWV0aG9kKXtcbiAgICAgICAgICAgIGNhc2UgJ2Nob3cnOlxuICAgICAgICAgICAgICAgIGlmKHRoaXMubnVtYmVyIDwgNyl7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0aWxlMiA9IG5ldyBUaWxlKHRoaXMuc3VpdCwgdGhpcy5udW1iZXIgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRpbGUzID0gbmV3IFRpbGUodGhpcy5zdWl0LCB0aGlzLm51bWJlciArIDIpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0aGlzLCB0aWxlMiwgdGlsZTMpO1xuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSA3OyBpIDwgMTA7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5ld1RpbGUgPSBuZXcgVGlsZSh0aGlzLnN1aXQsIGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobmV3VGlsZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdwb25nJzpcbiAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgMzsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5ld1RpbGUyID0gbmV3IFRpbGUodGhpcy5zdWl0LCB0aGlzLm51bWJlcik7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ld1RpbGUyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdrb25nJzpcbiAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgNDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5ld1RpbGUyID0gbmV3IFRpbGUodGhpcy5zdWl0LCB0aGlzLm51bWJlcik7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ld1RpbGUyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjbG9zZWQga29uZyc6XG4gICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IDQ7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXdUaWxlMiA9IG5ldyBUaWxlKHRoaXMuc3VpdCwgdGhpcy5udW1iZXIpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChuZXdUaWxlMik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVGlsZTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsSUFBSTtFQUNOQyxXQUFXQSxDQUFDQyxJQUFJLEVBQUVDLE1BQU0sRUFBQztJQUNyQjtJQUNBO0lBQ0E7SUFDQTtJQUNBLElBQUksQ0FBQ0QsSUFBSSxHQUFHQSxJQUFJO0lBQ2hCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQSxNQUFNO0VBQ3hCO0VBQ0FDLFFBQVFBLENBQUEsRUFBRTtJQUNOLE9BQVEsR0FBRSxJQUFJLENBQUNGLElBQUssR0FBRSxJQUFJLENBQUNDLE1BQU8sRUFBQztFQUN2QztFQUVBRSxLQUFLQSxDQUFDQyxJQUFJLEVBQUM7SUFDUDtJQUNBLE9BQU8sSUFBSSxDQUFDRixRQUFRLENBQUMsQ0FBQyxLQUFLRSxJQUFJLENBQUNGLFFBQVEsQ0FBQyxDQUFDO0VBQzlDO0VBQ0FHLE9BQU9BLENBQUNELElBQUksRUFBQztJQUNUO0lBQ0EsTUFBTUUsT0FBTyxHQUFHQyxJQUFJLENBQUNDLEdBQUcsQ0FBQyxJQUFJLENBQUNQLE1BQU0sR0FBR0csSUFBSSxDQUFDSCxNQUFNLENBQUM7SUFDbkQsT0FBTyxJQUFJLENBQUNELElBQUksS0FBS0ksSUFBSSxDQUFDSixJQUFJLElBQUlNLE9BQU8sSUFBSSxDQUFDLElBQUlBLE9BQU8sR0FBRyxDQUFDO0VBQ2pFO0VBQ0FHLFVBQVVBLENBQUNMLElBQUksRUFBQztJQUNaLE1BQU1FLE9BQU8sR0FBR0MsSUFBSSxDQUFDQyxHQUFHLENBQUMsSUFBSSxDQUFDUCxNQUFNLEdBQUdHLElBQUksQ0FBQ0gsTUFBTSxDQUFDO0lBQ25ELE9BQU8sSUFBSSxDQUFDRCxJQUFJLEtBQUtJLElBQUksQ0FBQ0osSUFB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\n//# sourceURL=webpack-internal:///./src/scripts/game/tile.js\n");

/***/ }),

/***/ "./src/scripts/view.js":
/*!*****************************!*\
  !*** ./src/scripts/view.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nclass View {\n  constructor(game, tile) {\n    this.game = game; //game object that store and evaluate hand and meld\n    this.tile = tile; //local storage of all tiles\n    this.clickTile = this.clickTile.bind(this);\n    this.setupTileSelector();\n    this.setupClickers();\n    this.setupMeldClickers();\n    this.setupCalculateClickers();\n  }\n  //generate all tile\n  //add event listener for clicing the tile and it will either add to hand or meld\n  //need a tracker to track the number of tile used and cannot exceed more than 4 tiles with\n  //the same suit and number used in the hand + meld\n  //disable the tile click if adding it in will violate the above rule\n\n  setupTileSelector() {\n    let tileSelector = document.querySelector('#tile_selector');\n    let ul = document.createElement(\"ul\");\n    ul.setAttribute(\"class\", \"tiles\");\n    this.tile.map((el, index) => {\n      let li = document.createElement(\"li\");\n      li.setAttribute(\"class\", `${el.toString()}`);\n      let img = document.createElement(\"img\");\n      img.setAttribute(\"src\", `../img/64/fulltiles/${index}.png`);\n      img.setAttribute(\"tile_index\", index);\n      li.appendChild(img);\n      ul.appendChild(li);\n    });\n    tileSelector.append(ul);\n  }\n  setupClickers() {\n    let clickable = this.game.validAdds();\n    let tiles = document.querySelectorAll('.tiles > li');\n    tiles.forEach(ele => {\n      ele.removeEventListener('click', this.clickTile);\n      if (clickable.includes(ele.className)) {\n        ele.addEventListener('click', this.clickTile);\n      }\n    });\n  }\n  setupMeldClickers() {\n    let melds = document.querySelectorAll('#meld_type > button');\n    melds.forEach(buttons => {\n      buttons.addEventListener('click', this.clickMeld.bind(this));\n    });\n  }\n  setupCalculateClickers() {\n    let calcButton = document.querySelector('#calculate_score');\n    calcButton.addEventListener('click', this.clickCalculate.bind(this));\n  }\n\n  //clicking the tile will append tile in hand / meld and store the tile class object in an array\n  //e is the event for clicking tile\n  //check the game class meld type to see where to add the tile\n  //check the game class tile count and disable the tiles click if it cannot be added\n  clickTile(e) {\n    e.preventDefault();\n    let clickIndex = e.target.getAttribute(\"tile_index\");\n    let selectTile = this.game.tiles[clickIndex];\n    let method = this.game.checkMeld();\n    let addObject = this.game.addTile(selectTile);\n    //convert object to html and add it in according to the method\n    if (method === 'hand') {\n      let hands = document.querySelector('.hands');\n      addObject.forEach(ele => {\n        let li = document.createElement(\"li\");\n        li.setAttribute(\"class\", `${ele.toString()}`);\n        let index = this.tile.indexOf(ele);\n        let img = document.createElement(\"img\");\n        img.setAttribute(\"src\", `../img/64/fulltiles/${index}.png`);\n        li.setAttribute(\"tile_index\", index);\n        li.appendChild(img);\n        hands.append(li);\n      });\n      [...hands.children].sort((a, b) => Number(a.getAttribute('tile_index')) > Number(b.getAttribute('tile_index')) ? 1 : -1).forEach(node => {\n        hands.appendChild(node);\n      });\n    } else {\n      let melds = document.querySelector('.melds');\n      let li2 = document.createElement(\"li\");\n      let ul = document.createElement(\"ul\");\n      ul.setAttribute(\"meldType\", `${method}`);\n      addObject.forEach(ele => {\n        let li = document.createElement(\"li\");\n        li.setAttribute(\"class\", `${ele.toString()}`);\n        let index;\n        this.tile.forEach((ele2, i) => {\n          if (ele2.equal(ele)) index = i;\n        });\n        let img = document.createElement(\"img\");\n        img.setAttribute(\"src\", `../img/64/fulltiles/${index}.png`);\n        li.setAttribute(\"tile_index\", index);\n        li.appendChild(img);\n        ul.appendChild(li);\n        li2.appendChild(ul);\n        melds.append(li2);\n      });\n    }\n    this.setupClickers();\n    //reorder the hand and meld\n  }\n\n  //clicking the meld type button will change the click tile action\n  //only the chosen one type value become true  and change all other value to false\n  //Meld type button can either be selected one or none\n\n  clickMeld(e) {\n    e.preventDefault();\n    let method = e.target.getAttribute(\"id\");\n    this.game.meldSwitch(method);\n    this.setupClickers();\n  }\n  clickCalculate(e) {\n    e.preventDefault();\n    let result = this.game.checkScore();\n    let scoreBoard = document.querySelector('.scores');\n    scoreBoard.innerHTML = '';\n    result.forEach(el => {\n      let li = document.createElement(\"li\");\n      li.innerText = el;\n      li.setAttribute('score_name', el);\n      scoreBoard.appendChild(li);\n    });\n  }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (View);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0MsYUFBYSxDQUFDLFNBQVMsQ0FBQztJQUNsRG9ELFVBQVUsQ0FBQ0MsU0FBUyxHQUFHLEVBQUU7SUFDekJILE1BQU0sQ0FBQ2xDLE9BQU8sQ0FBRVgsRUFBRSxJQUFHO01BQ2pCLElBQUlFLEVBQUUsR0FBR1IsUUFBUSxDQUFDRyxhQUFhLENBQUMsSUFBSSxDQUFDO01BQ3JDSyxFQUFFLENBQUMrQyxTQUFTLEdBQUdqRCxFQUFFO01BQ2pCRSxFQUFFLENBQUNKLFlBQVksQ0FBQyxZQUFZLEVBQUVFLEVBQUUsQ0FBQztNQUNqQytDLFVBQVUsQ0FBQzFDLFdBQVcsQ0FBQ0gsRUFBRSxDQUFDO0lBQzlCLENBQUMsQ0FBQztFQUVOO0FBR0o7QUFFQSwrREFBZW5CLElBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qYXZhc2NyaXB0cHJvamVjdDEvLi9zcmMvc2NyaXB0cy92aWV3LmpzPzgwYzMiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgVmlldyB7XG4gICAgY29uc3RydWN0b3IoZ2FtZSwgdGlsZSl7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWUgLy9nYW1lIG9iamVjdCB0aGF0IHN0b3JlIGFuZCBldmFsdWF0ZSBoYW5kIGFuZCBtZWxkXG4gICAgICAgIHRoaXMudGlsZSA9IHRpbGUgLy9sb2NhbCBzdG9yYWdlIG9mIGFsbCB0aWxlc1xuICAgICAgICB0aGlzLmNsaWNrVGlsZSA9IHRoaXMuY2xpY2tUaWxlLmJpbmQodGhpcylcbiAgICAgICAgdGhpcy5zZXR1cFRpbGVTZWxlY3RvcigpXG4gICAgICAgIHRoaXMuc2V0dXBDbGlja2VycygpXG4gICAgICAgIHRoaXMuc2V0dXBNZWxkQ2xpY2tlcnMoKVxuICAgICAgICB0aGlzLnNldHVwQ2FsY3VsYXRlQ2xpY2tlcnMoKVxuICAgIH1cbiAgICAvL2dlbmVyYXRlIGFsbCB0aWxlXG4gICAgLy9hZGQgZXZlbnQgbGlzdGVuZXIgZm9yIGNsaWNpbmcgdGhlIHRpbGUgYW5kIGl0IHdpbGwgZWl0aGVyIGFkZCB0byBoYW5kIG9yIG1lbGRcbiAgICAvL25lZWQgYSB0cmFja2VyIHRvIHRyYWNrIHRoZSBudW1iZXIgb2YgdGlsZSB1c2VkIGFuZCBjYW5ub3QgZXhjZWVkIG1vcmUgdGhhbiA0IHRpbGVzIHdpdGhcbiAgICAvL3RoZSBzYW1lIHN1aXQgYW5kIG51bWJlciB1c2VkIGluIHRoZSBoYW5kICsgbWVsZFxuICAgIC8vZGlzYWJsZSB0aGUgdGlsZSBjbGljayBpZiBhZGRpbmcgaXQgaW4gd2lsbCB2aW9sYXRlIHRoZSBhYm92ZSBydWxlXG5cbiAgICBzZXR1cFRpbGVTZWxlY3Rvcigpe1xuICAgICAgICBsZXQgdGlsZVNlbGVjdG9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RpbGVfc2VsZWN0b3InKVxuICAgICAgICBsZXQgdWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIik7XG4gICAgICAgIHVsLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwidGlsZXNcIik7XG4gICAgICAgIHRoaXMudGlsZS5tYXAoKGVsLCBpbmRleCk9PntcbiAgICAgICAgICAgIGxldCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgICAgICAgICAgIGxpLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGAke2VsLnRvU3RyaW5nKCl9YCk7XG4gICAgICAgICAgICBsZXQgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICAgICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoXCJzcmNcIixgLi4vaW1nLzY0L2Z1bGx0aWxlcy8ke2luZGV4fS5wbmdgKTtcbiAgICAgICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoXCJ0aWxlX2luZGV4XCIsIGluZGV4KTtcbiAgICAgICAgICAgIGxpLmFwcGVuZENoaWxkKGltZyk7XG4gICAgICAgICAgICB1bC5hcHBlbmRDaGlsZChsaSk7XG4gICAgICAgIH0pXG4gICAgICAgIHRpbGVTZWxlY3Rvci5hcHBlbmQodWwpXG4gICAgfVxuXG4gICAgc2V0dXBDbGlja2Vycygpe1xuICAgICAgICBsZXQgY2xpY2thYmxlID0gdGhpcy5nYW1lLnZhbGlkQWRkcygpO1xuICAgICAgICBsZXQgdGlsZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGlsZXMgPiBsaScpXG4gICAgICAgIHRpbGVzLmZvckVhY2goKGVsZSk9PntcbiAgICAgICAgICAgIGVsZS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2xpY2tUaWxlKVxuICAgICAgICAgICAgaWYoY2xpY2thYmxlLmluY2x1ZGVzKGVsZS5jbGFzc05hbWUpKXtcbiAgICAgICAgICAgICAgICBlbGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsaWNrVGlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgc2V0dXBNZWxkQ2xpY2tlcnMoKXtcbiAgICAgICAgbGV0IG1lbGRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI21lbGRfdHlwZSA+IGJ1dHRvbicpXG4gICAgICAgIG1lbGRzLmZvckVhY2goKGJ1dHRvbnMpPT57XG4gICAgICAgICAgICBidXR0b25zLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbGlja01lbGQuYmluZCh0aGlzKSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBzZXR1cENhbGN1bGF0ZUNsaWNrZXJzKCl7XG4gICAgICAgIGxldCBjYWxjQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NhbGN1bGF0ZV9zY29yZScpXG4gICAgICAgIGNhbGNCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsaWNrQ2FsY3VsYXRlLmJpbmQodGhpcykpXG4gICAgfVxuXG4gICAgLy9jbGlja2luZyB0aGUgdGlsZSB3aWxsIGFwcGVuZCB0aWxlIGluIGhhbmQgLyBtZWxkIGFuZCBzdG9yZSB0aGUgdGlsZSBjbGFzcyBvYmplY3QgaW4gYW4gYXJyYXlcbiAgICAvL2UgaXMgdGhlIGV2ZW50IGZvciBjbGlja2luZyB0aWxlXG4gICAgLy9jaGVjayB0aGUgZ2FtZSBjbGFzcyBtZWxkIHR5cGUgdG8gc2VlIHdoZXJlIHRvIGFkZCB0aGUgdGlsZVxuICAgIC8vY2hlY2sgdGhlIGdhbWUgY2xhc3MgdGlsZSBjb3VudCBhbmQgZGlzYWJsZSB0aGUgdGlsZXMgY2xpY2sgaWYgaXQgY2Fubm90IGJlIGFkZGVkXG4gICAgY2xpY2tUaWxlKGUpe1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgbGV0IGNsaWNrSW5kZXggPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJ0aWxlX2luZGV4XCIpO1xuICAgICAgICBsZXQgc2VsZWN0VGlsZSA9IHRoaXMuZ2FtZS50aWxlc1tjbGlja0luZGV4XTtcbiAgICAgICAgbGV0IG1ldGhvZCA9IHRoaXMuZ2FtZS5jaGVja01lbGQoKVxuICAgICAgICBsZXQgYWRkT2JqZWN0ID0gdGhpcy5nYW1lLmFkZFRpbGUoc2VsZWN0VGlsZSk7XG4gICAgICAgIC8vY29udmVydCBvYmplY3QgdG8gaHRtbCBhbmQgYWRkIGl0IGluIGFjY29yZGluZyB0byB0aGUgbWV0aG9kXG4gICAgICAgIGlmKG1ldGhvZCA9PT0gJ2hhbmQnKXtcbiAgICAgICAgICAgIGxldCBoYW5kcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oYW5kcycpO1xuICAgICAgICAgICAgYWRkT2JqZWN0LmZvckVhY2goKGVsZSk9PntcbiAgICAgICAgICAgICAgICBsZXQgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgICAgICAgICAgICAgbGkuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgYCR7ZWxlLnRvU3RyaW5nKCl9YCk7XG4gICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gdGhpcy50aWxlLmluZGV4T2YoZWxlKVxuICAgICAgICAgICAgICAgIGxldCBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgICAgICAgICAgICAgIGltZy5zZXRBdHRyaWJ1dGUoXCJzcmNcIixgLi4vaW1nLzY0L2Z1bGx0aWxlcy8ke2luZGV4fS5wbmdgKTtcbiAgICAgICAgICAgICAgICBsaS5zZXRBdHRyaWJ1dGUoXCJ0aWxlX2luZGV4XCIsIGluZGV4KTtcbiAgICAgICAgICAgICAgICBsaS5hcHBlbmRDaGlsZChpbWcpO1xuICAgICAgICAgICAgICAgIGhhbmRzLmFwcGVuZChsaSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFsuLi5oYW5kcy5jaGlsZHJlbl1cbiAgICAgICAgICAgICAgICAuc29ydCgoYSxiKT0+IE51bWJlcihhLmdldEF0dHJpYnV0ZSgndGlsZV9pbmRleCcpKSA+IE51bWJlcihiLmdldEF0dHJpYnV0ZSgndGlsZV9pbmRleCcpKSA/IDEgOiAtMSlcbiAgICAgICAgICAgICAgICAuZm9yRWFjaCgobm9kZSk9PntoYW5kcy5hcHBlbmRDaGlsZChub2RlKX0pXG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgbGV0IG1lbGRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1lbGRzJyk7XG4gICAgICAgICAgICBsZXQgbGkyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpXG4gICAgICAgICAgICBsZXQgdWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIik7XG4gICAgICAgICAgICB1bC5zZXRBdHRyaWJ1dGUoXCJtZWxkVHlwZVwiLCBgJHttZXRob2R9YCk7XG4gICAgICAgICAgICBhZGRPYmplY3QuZm9yRWFjaCgoZWxlKT0+e1xuICAgICAgICAgICAgICAgIGxldCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgICAgICAgICAgICAgICBsaS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBgJHtlbGUudG9TdHJpbmcoKX1gKTtcbiAgICAgICAgICAgICAgICBsZXQgaW5kZXg7XG4gICAgICAgICAgICAgICAgdGhpcy50aWxlLmZvckVhY2goKGVsZTIsIGkpPT57XG4gICAgICAgICAgICAgICAgICAgIGlmKGVsZTIuZXF1YWwoZWxlKSkgaW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgbGV0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG4gICAgICAgICAgICAgICAgaW1nLnNldEF0dHJpYnV0ZShcInNyY1wiLGAuLi9pbWcvNjQvZnVsbHRpbGVzLyR7aW5kZXh9LnBuZ2ApO1xuICAgICAgICAgICAgICAgIGxpLnNldEF0dHJpYnV0ZShcInRpbGVfaW5kZXhcIiwgaW5kZXgpO1xuICAgICAgICAgICAgICAgIGxpLmFwcGVuZENoaWxkKGltZyk7XG4gICAgICAgICAgICAgICAgdWwuYXBwZW5kQ2hpbGQobGkpO1xuICAgICAgICAgICAgICAgIGxpMi5hcHBlbmRDaGlsZCh1bClcbiAgICAgICAgICAgICAgICBtZWxkcy5hcHBlbmQobGkyKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXR1cENsaWNrZXJzKClcbiAgICAgICAgLy9yZW9yZGVyIHRoZSBoYW5kIGFuZCBtZWxkXG5cbiAgICB9XG5cbiAgICAvL2NsaWNraW5nIHRoZSBtZWxkIHR5cGUgYnV0dG9uIHdpbGwgY2hhbmdlIHRoZSBjbGljayB0aWxlIGFjdGlvblxuICAgIC8vb25seSB0aGUgY2hvc2VuIG9uZSB0eXBlIHZhbHVlIGJlY29tZSB0cnVlICBhbmQgY2hhbmdlIGFsbCBvdGhlciB2YWx1ZSB0byBmYWxzZVxuICAgIC8vTWVsZCB0eXBlIGJ1dHRvbiBjYW4gZWl0aGVyIGJlIHNlbGVjdGVkIG9uZSBvciBub25lXG5cblxuICAgIGNsaWNrTWVsZChlKXtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIGxldCBtZXRob2QgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJpZFwiKVxuICAgICAgICB0aGlzLmdhbWUubWVsZFN3aXRjaChtZXRob2QpXG4gICAgICAgIHRoaXMuc2V0dXBDbGlja2VycygpXG5cbiAgICB9XG5cbiAgICBjbGlja0NhbGN1bGF0ZShlKXtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgIGxldCByZXN1bHQgPSB0aGlzLmdhbWUuY2hlY2tTY29yZSgpXG4gICAgICAgIGxldCBzY29yZUJvYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNjb3JlcycpXG4gICAgICAgIHNjb3JlQm9hcmQuaW5uZXJIVE1MID0gJydcbiAgICAgICAgcmVzdWx0LmZvckVhY2goKGVsKT0+e1xuICAgICAgICAgICAgbGV0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpXG4gICAgICAgICAgICBsaS5pbm5lclRleHQgPSBlbFxuICAgICAgICAgICAgbGkuc2V0QXR0cmlidXRlKCdzY29yZV9uYW1lJywgZWwpXG4gICAgICAgICAgICBzY29yZUJvYXJkLmFwcGVuZENoaWxkKGxpKVxuICAgICAgICB9KVxuXG4gICAgfVxuXG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgVmlld1xuIl0sIm5hbWVzIjpbIlZpZXciLCJjb25zdHJ1Y3RvciIsImdhbWUiLCJ0aWxlIiwiY2xpY2tUaWxlIiwiYmluZCIsInNldHVwVGlsZVNlbGVjdG9yIiwic2V0dXBDbGlja2VycyIsInNldHVwTWVsZENsaWNrZXJzIiwic2V0dXBDYWxjdWxhdGVDbGlja2VycyIsInRpbGVTZWxlY3RvciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInVsIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsIm1hcCIsImVsIiwiaW5kZXgiLCJsaSIsInRvU3RyaW5nIiwiaW1nIiwiYXBwZW5kQ2hpbGQiLCJhcHBlbmQiLCJjbGlja2FibGUiLCJ2YWxpZEFkZHMiLCJ0aWxlcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiZWxlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImluY2x1ZGVzIiwiY2xhc3NOYW1lIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm1lbGRzIiwiYnV0dG9ucyIsImNsaWNrTWVsZCIsImNhbGNCdXR0b24iLCJjbGlja0NhbGN1bGF0ZSIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImNsaWNrSW5kZXgiLCJ0YXJnZXQiLCJnZXRBdHRyaWJ1dGUiLCJzZWxlY3RUaWxlIiwibWV0aG9kIiwiY2hlY2tNZWxkIiwiYWRkT2JqZWN0IiwiYWRkVGlsZSIsImhhbmRzIiwiaW5kZXhPZiIsImNoaWxkcmVuIiwic29ydCIsImEiLCJiIiwiTnVtYmVyIiwibm9kZSIsImxpMiIsImVsZTIiLCJpIiwiZXF1YWwiLCJtZWxkU3dpdGNoIiwicmVzdWx0IiwiY2hlY2tTY29yZSIsInNjb3JlQm9hcmQiLCJpbm5lckhUTUwiLCJpbm5lclRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/scripts/view.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qYXZhc2NyaXB0cHJvamVjdDEvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;